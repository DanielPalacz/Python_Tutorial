


9. Classes



1)
Python Classes:
-- mix of C++ / Modula-3

2)
Python Classes features:
-- inheritance allows multiple base classes
-- overriding method can call the method of a base class with the same name.
-- they are created at runtime,

-- class members		- public
-- member functions 	- virtual (what it is? --> https://en.wikipedia.org/wiki/Virtual_function)
---- As in Smalltalk, classes themselves are objects. This provides semantics for importing and renaming.
---- Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.





9.1. - A Word About Names and Objects
-- nothing specific



9.2. - Python Scopes and Namespaces
-- In a sense the set of attributes of an object also form a namespace. (Classes as namespaces)
-- The language definition is evolving towards static name resolution, at “compile” time.

-- Assignments do not copy data. (but how it works? what can be tricky in python assigment/referencing especially for C background coders).
-- The statement del x removes the binding of x from the namespace referenced by the local scope.
-- All operations that introduce new names use the local scope. in particular, import statements and function definitions bind the module or function name in the local scope.







9.3. A First Look at Classes



9.3.1. Class Definition Syntax
-- Class definitions, like function definitions (def statements) must be executed before they have any effect.
-- When a class definition is entered, a new namespace is created.

---- 1. class atributes/functions, 2. instance atributes/methods, 3. static atributes/functions ?



9.3.2. Class Objects
-- class objects support Two types of operations:
 ----> attribute references	-> (atr and funct: MyClass.i and MyClass.f )
 ----> and instantiation		-> (x = MyClass())


***********************************************
class MyClass:
    """A simple example class"""
	
	def __init__(self):
		self.data = []
	
    i = 12345

    def f(self):
        return 'hello world'
***********************************************



9.3.3. Instance Objects
-- The only operations understood by instance objects are attribute references.
-----> There are two kinds of valid attribute names: data attributes (instance variables) and methods.

-- But x.f is not the same thing as MyClass.f — it is a method object, not a function object.



9.3.4. Method Object
In our example, the call x.f() is exactly equivalent to MyClass.f(x).



9.3.5. Class and Instance Variables
Generally speaking, 
-- instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class.





########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * ########### * 




9.4. Random Remarks

On the other hand, the Python implementation, written in C, can completely hide implementation details and control access to an object if necessary; this can be used by extensions to Python written in C.

*********************************************************************************************************************************************************************
*
*	-- x.f() is exactly equivalent to MyClass.f(x)
*	-- Data attributes may be referenced by methods as well as by ordinary users (“clients”) of an object. 
* 	-- Often, the first argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. 
* 	---- A class and corelation with scope notions
*	-- Each value is an object, and therefore has a class (also called its type). It is stored as """object.__class__"""
*
*********************************************************************************************************************************************************************






9.5. Inheritance - syntax
-- The name BaseClassName must be defined in a scope containing the derived class definition.
----> class DerivedClassName(BaseClassName):
----> class DerivedClassName(modname.BaseClassName):

-- Python has two built-in functions giving information about inheritance:
----> isinstance(obj1, DerivedClass1)
----> issubclass(DerivedClass1, Base2)

-- Inheritance and constructor overriding
----> if __init__(..) is not present in the DerivedClassName then BaseClassName __init__(..) constructor method is used

3


Mechanics of super()
-- super() in constructor/method of Derived Class
-- super() returns  an object of parent class (technically, it is called "proxy object")

-- class DerivedClass1(Base1):
----> # super().__init__()    =   Base1.__init__(self)




super() can also take two parameters ---> super(subclass, object_that_os_instance_of_subclass):
-- super() is equivalent to "super(DerivedClass1, self)" ----- and it is default "super" behaviour - it is receomended usage of "super"
----> "syntax sugar"


-- but super(BaseClass, self) will change def bahaviour
***-> ***-> ***-> ***-> ***-> ***-> ***->
-- the parameterless call to super() is recommended and sufficient for most use cases.


********************

-- note: Technically, super() doesn’t return a method. It returns a proxy object.
----> this is an object that delegates calls to the correct class methods without making an additional object in order to do so.
----> The super() builtin returns a proxy object (temporary object of the superclass) that allows us to access methods of the base class.


In Python, super() has two major use cases:
--> Allows us to avoid using the base class name explicitly
--> Working with Multiple Inheritance








9.5.1. Multiple Inheritance

-- Method Resolution Order (MRO)				--->	how methods are searched in Multiple inheritance:		RightPyramid.__mro__
-----> fixing "diamond problem"

--> class DerivedClassName(Base1, Base2, Base3)	--->	SEARCHING ORDER:	 									DerivedClassName, Base1, Base2, Base3
--> --> using composition instead of inheritance?





9.6. Private Variables

-- privacy in Python --> convention
-- name mangling:
----- # print(obj1.__a1)
----- print(obj1._DerivedClass1__a1)




Notice that code passed to exec() or eval() does not consider the classname of the invoking class to be the current class; 
this is similar to the effect of the global statement, the effect of which is likewise restricted to code that is byte-compiled together. 
The same restriction applies to getattr(), setattr() and delattr(), as well as when referencing __dict__ directly.


9.7. Odds and Ends

Instance method objects have attributes too: 
-- m.__self__ is the instance object with the method m(), 
-- and m.__func__ is the function object corresponding to the method.

print(x1.double_base_string.__func__)
print(x1.double_base_string.__self__)





9.8. Iterators (iterator protocol)

-- it is concrete construction providing specific behaviour - kind of iterator protocol
-- then there is the mechanics behind the iterator protocol


-- "for" calls iter()/container
-- The function iter() returns an iterator object that defines the method __next__() which accesses elements in the container one at a time.
-- When there are no more elements, __next__() raises a StopIteration exception which tells the for loop to terminate.

-- it is possible to call the __next__() method using the next() built-in function


-- how to add iterator behavior to your class?
----> Define an __iter__() method which returns an object with a __next__() method.
----> If the class defines __next__(), then __iter__() can just return self.




9.9. Generators
-- Generators are a simple and powerful tool for creating iterators. 
-- They are written like regular functions but use the yield statement whenever they want to return data.

-- anything that can be done with generators can also be done with class-based iterators as described in the previous section.
-- what makes generators so compact is that the __iter__() and __next__() methods are created automatically.
-- when generators terminate, they automatically raise StopIteration



9.10. Generator Expressions
-- Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of square brackets

